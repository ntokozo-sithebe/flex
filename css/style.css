*,
*::after,
*::before {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}
:root{
    --primary: black;
    --secondary: rgb(255, 255, 255);
    color: rgba(1, 9, 15, 0.973);
}
/* Container */
.container {
    /* Local custom variable */
    /* top and bottom */
    margin-block: 20px;
    --numbOfRed: 123;
    --numbOfOrange: 100;
    --numbOfYellow: 18;
    background-color: #f1c6ea;
    align-items: center;
    border-width: 5px 8px;
    border-image: radial-gradient(120deg, var(--numbOfRed), var(--numbOfOrange), var(--numbOfYellow));
}
/* Display flex */
.container :is(#example1, #example2), 
.button-wrapper {
    display: flex;
    justify-content: center;
    gap: .6rem;
}
/* wrap: when there is no enough space place it to the 
next line. Or Wrapping a gift in a box prevents it from coming out. */
.container :is(#example2) {
    flex-flow: wrap;
}
#example1 {
    display: flex;
}
.item>img{
    width: 20rem;
    aspect-ratio: 1:1;
}
/* Button */
.button-wrapper {
    justify-content: end;
}
.button-wrapper button {
    border: 3px solid;
    border-image: linear-gradient( rgb(255, 255, 0), var(--awesome)) 11 fill;
}


/* Animation */
@keyframes animateLaptop {
    /* 
    if you don't want to use from and to, 
    you are welcome to use % such as 
    0%{}: animation start
    100%{}: animation end
    */
    from {
       transform: translateX(0px);
    }
    to{
       transform: translateX(calc(100vw - 100px)) scale(1, 1) rotateX(123deg);
    }
}

/*
animation property:
- name
- duration
- timing function
- delay
- iteration-count
- direction
- fill-mode
- play-state 
*/
